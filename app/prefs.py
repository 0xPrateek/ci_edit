# These prefs are not fully working.
prefs = {
  'filetype': {
    'bash': {
      'ext': ['.sh'],
      'grammar': 'bash',
      'type': 'text',
    },
    'binary': {
      'ext': ['.exe', '.jpg', '.jpeg', '.png', '.o', '.obj', '.pyc', '.pyo'],
      'grammar': None,
      'type': 'binary',
    },
    'c': {
      'ext': ['.c', '.h'],
      'grammar': 'c',
      'type': 'text',
    },
    'cpp': {
      'ext': ['.cc', '.cpp', '.cxx', '.c++', '.hpp', '.hxx', '.h++'],
      'grammar': 'cpp',
      'type': 'text',
    },
    'css': {
      'ext': ['.css', '_css.html'],
      'grammar': 'css',
      'type': 'text',
    },
    'html': {
      'ext': ['.htm', '.html'],
      'grammar': 'html',
      'type': 'text',
    },
    'js': {
      'ext': ['.json', '.js'],
      'grammar': 'js',
      'type': 'text',
    },
    'python': {
      'ext': ['.py'],
      'grammar': 'py',
      'type': 'text',
    },
  },
  'grammar': {
    # A grammar is
    # 'grammar_name': {
    #   'begin': None or string,
    #   'continued': None or string, Prefixed used when continuing to another line,
    #   'end': None or string,
    #   'escape': None or string,
    #   'indent': None or string,
    #   'keywords': None or list of string,
    #   'single_line': Boolean, Whether entire grammar must be on a single line,
    # }
    'bash': {
      'escape': '\\',
      'indent': '  ',
      'keywords': [
        'break', 'continue', 'if', 'for',
        'return', 'while',
      ],
      'contains': ['c_string1', 'c_string2', 'pound_comment'],
    },
    'c': {
      'begin': None,
      'end': None,
      'escape': None,
      'indent': '  ',
      'keywords': [
        'class', 'else', 'for', 'if', 'return', 'sizeof', 'static', 'struct',
        'typedef', 'while',
      ],
      'types': [
        'char', 'double', 'float', 'int', 'long', 'short', 'unsigned',
        'int8_t', 'int16_t', 'int32_t', 'int64_t',
        'uint8_t', 'uint16_t', 'uint32_t', 'uint64_t',
      ],
      'contains': ['cpp_block_comment', 'cpp_line_comment', 'c_preprocessor',
        'c_string1', 'c_string2', 'hex_number'],
    },
    'cpp': {
      'begin': None,
      'end': None,
      'escape': None,
      'indent': '  ',
      'keywords': [
        'case',
        'public',
        'private',
        'protected',
        'const',
        'class', 'else', 'for', 'if', 'return', 'sizeof', 'static', 'struct',
        'typedef', 'while',
        'switch',
        'throw',
      ],
      'types': [
        'char', 'double', 'float', 'int', 'long', 'short', 'unsigned',
        'int8_t', 'int16_t', 'int32_t', 'int64_t',
        'uint8_t', 'uint16_t', 'uint32_t', 'uint64_t',
      ],
      'contains': ['cpp_block_comment', 'cpp_line_comment', 'c_preprocessor',
        'c_string1', 'c_string2', 'hex_number'],
    },
    'cpp_block_comment': {
      'begin': '/\\*',
      'continued': ' * ',
      'end': '\\*/',
      'escape': None,
      'indent': '  ',
      'keywords': [],
      'nestable': False,
    },
    'cpp_line_comment': {
      'begin': '//',
      'continued': '// ',
      'end': '\n',
      'escape': '\\',
      'indent': '  ',
      'keywords': [],
      'nestable': False,
    },
    'c_preprocessor': {
      'begin': '#',
      'end': '\n',
      'escape': None,
      'indent': '  ',
      'keywords': [
        '#\s*?define', '#\s*?defined', '#\s*?elif', '#\s*?endif',
        '#\s*?if', '#\s*?ifdef', '#\s*?ifndef', '#\s*?include',
        '#\s*?undef',
      ],
      'contains': ['file_path_quoted', 'file_path_bracketed'],
    },
    'c_string1': {
      'begin': '"',
      'end': '"',
      'escape': '\\',
      'indent': '  ',
      'keywords': [],
      'single_line': True,
    },
    'c_string2': {
      'begin': "'",
      'end': "'",
      'escape': '\\',
      'indent': '  ',
      'keywords': [],
      'single_line': True,
    },
    'css': {
      'begin': '<style',
      'end': '</style>',
      'escape': None,
      'indent': '  ',
      'keywords': [],
      'contains': ['cpp_block_comment'],
    },
    'html': {
      'escape': None,
      'indent': '  ',
      'keywords': [
        'a', 'b', 'div', 'img', 'input', 'select', 'span',
      ],
      'contains': ['css', 'html_block_comment', 'js'],
    },
    'hex_number': {
      'begin': '0x',
      'end': '[^0-9a-fA-F]',
    },
    'html_block_comment': {
      'begin': '<!--',
      'end': '-->',
      'escape': None,
      'indent': '  ',
      'keywords': [],
      'prefix': '',
    },
    'js': {
      'begin': '<script',
      'end': '</script>',
      'escape': None,
      'indent': '  ',
      'keywords': [
        'if', 'for', 'return', 'while',
      ],
      'contains': ['c_string1', 'c_string2', 'cpp_block_comment',
          'cpp_line_comment'],
    },
    'md': {
      'escape': None,
      'indent': '  ',
      'keywords': [],
    },
    'number': {
      'begin': '[1-9]',
      'end': '[^0-9]',
    },
    'octal_number': {
      'begin': '0',
      'end': '[^0-7]',
    },
    'py': {
      'escape': '\\',
      'indent': '  ',
      'keywords': [
        'and', 'as'  'break', 'class', 'continue',
        'def', 'elif', 'else', 'except',
        'False', 'for', 'from', 'function',
        'global', 'if', 'import', 'in', 'is',
        'None', 'not',
        'or', 'pass',
        'raise', 'range', 'return',
        'then', 'True', 'try',
        'until', 'while', 'yeild',
      ],
      'contains': ['c_string1', 'c_string2',
          'pound_comment', 'py_string1', 'py_string2'],
    },
    'pound_comment': {
      'begin': '#',
      'continuation': '# ',
      'end': '\n',
      'escape': None,
      'indent': '  ',
      'keywords': [],
    },
    'py_string1': {
      'begin': "'''",
      'end': "'''",
      'escape': '\\',
      'indent': '  ',
      'keywords': [],
      'within': ['py'],
    },
    'py_string2': {
      'begin': '"""',
      'end': '"""',
      'escape': '\\',
      'indent': '  ',
      'keywords': [],
      'within': ['py'],
    },
    'text': {
      'begin': None,
      'end': None,
      'escape': None,
      'indent': '  ',
      'keywords': [],
      'contains': ['quoted_string'],
    },
  },
}